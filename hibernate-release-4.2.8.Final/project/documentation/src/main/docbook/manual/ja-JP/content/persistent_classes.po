# translation of Collection_Mapping.po to
# Xi HUANG <xhuang@redhat.com>, 2007, 2010.
msgid ""
msgstr ""
"Project-Id-Version: Collection_Mapping\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-20 21:02+0000\n"
"PO-Revision-Date: 2010-01-04 13:58+1000\n"
"Last-Translator: Xi HUANG <xhuang@redhat.com>\n"
"Language-Team:  <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: persistent_classes.xml:32
#, no-c-format
msgid "Persistent Classes"
msgstr "永続クラス"

#. Tag: para
#: persistent_classes.xml:34
#, fuzzy, no-c-format
msgid ""
"Persistent classes are classes in an application that implement the entities "
"of the business problem (e.g. Customer and Order in an E-commerce "
"application). The term \"persistent\" here means that the classes are able "
"to be persisted, not that they are in the persistent state (see <xref "
"linkend=\"objectstate-overview\"/> for discussion)."
msgstr ""
"永続クラスはビジネス上の問題のエンティティ（例えば、 E コマースアプリケーショ"
"ンの顧客や注文） を実装するアプリケーションのクラスです。永続クラスのすべての"
"インスタンスが永続状態であると見なされるわけではありません。インスタンスは逆"
"に一時的（transient）であったり、分離状態（detached）であったりするかもしれま"
"せん。"

#. Tag: para
#: persistent_classes.xml:41
#, fuzzy, no-c-format
msgid ""
"Hibernate works best if these classes follow some simple rules, also known "
"as the Plain Old Java Object (POJO) programming model. However, none of "
"these rules are hard requirements. Indeed, Hibernate assumes very little "
"about the nature of your persistent objects. You can express a domain model "
"in other ways (using trees of <interfacename>java.util.Map</interfacename> "
"instances, for example)."
msgstr ""
"Plain Old Java Object (POJO)プログラミングモデルとしても知られるいくつかの単"
"純なルールに従うなら、 Hibernate は最もよく働きます。しかしこれらのルールは難"
"しいものではありません。実際 Hibernate3 は永続オブジェクトの性質にほとんど何"
"の前提も置いていません。ドメインモデルは他の方法で表現することもできます。例"
"えば <literal>Map</literal> インスタンスのツリーを使う方法があります。"

#. Tag: title
#: persistent_classes.xml:49
#, no-c-format
msgid "A simple POJO example"
msgstr "単純な POJO の例"

#. Tag: title
#: persistent_classes.xml:52
#, no-c-format
msgid "Simple POJO representing a cat"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:53
#, fuzzy, no-c-format
msgid ""
"package eg;\n"
"import java.util.Set;\n"
"import java.util.Date;\n"
"\n"
"public class Cat {\n"
"private Long id; // identifier\n"
"\n"
"private Date birthdate;\n"
"private Color color;\n"
"private char sex;\n"
"private float weight;\n"
"    private int litterId;\n"
"\n"
"    private Cat mother;\n"
"    private Set kittens = new HashSet();\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id=id;\n"
"    }\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    void setBirthdate(Date date) {\n"
"        birthdate = date;\n"
"    }\n"
"    public Date getBirthdate() {\n"
"        return birthdate;\n"
"    }\n"
"\n"
"    void setWeight(float weight) {\n"
"        this.weight = weight;\n"
"    }\n"
"    public float getWeight() {\n"
"        return weight;\n"
"    }\n"
"\n"
"    public Color getColor() {\n"
"        return color;\n"
"    }\n"
"    void setColor(Color color) {\n"
"        this.color = color;\n"
"    }\n"
"\n"
"    void setSex(char sex) {\n"
"        this.sex=sex;\n"
"    }\n"
"    public char getSex() {\n"
"        return sex;\n"
"    }\n"
"\n"
"    void setLitterId(int id) {\n"
"        this.litterId = id;\n"
"    }\n"
"    public int getLitterId() {\n"
"        return litterId;\n"
"    }\n"
"\n"
"    void setMother(Cat mother) {\n"
"        this.mother = mother;\n"
"    }\n"
"    public Cat getMother() {\n"
"        return mother;\n"
"    }\n"
"    void setKittens(Set kittens) {\n"
"        this.kittens = kittens;\n"
"    }\n"
"    public Set getKittens() {\n"
"        return kittens;\n"
"    }\n"
"\n"
"    // addKitten not needed by Hibernate\n"
"    public void addKitten(Cat kitten) {\n"
"        kitten.setMother(this);\n"
"    kitten.setLitterId( kittens.size() );\n"
"        kittens.add(kitten);\n"
"    }\n"
"}"
msgstr ""
"package eg;\n"
"import java.util.Set;\n"
"import java.util.Date;\n"
"\n"
"public class Cat {\n"
"    private Long id; // identifier\n"
"\n"
"    private Date birthdate;\n"
"    private Color color;\n"
"    private char sex;\n"
"    private float weight;\n"
"    private int litterId;\n"
"\n"
"    private Cat mother;\n"
"    private Set kittens = new HashSet();\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id=id;\n"
"    }\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    void setBirthdate(Date date) {\n"
"        birthdate = date;\n"
"    }\n"
"    public Date getBirthdate() {\n"
"        return birthdate;\n"
"    }\n"
"\n"
"    void setWeight(float weight) {\n"
"        this.weight = weight;\n"
"    }\n"
"    public float getWeight() {\n"
"        return weight;\n"
"    }\n"
"\n"
"    public Color getColor() {\n"
"        return color;\n"
"    }\n"
"    void setColor(Color color) {\n"
"        this.color = color;\n"
"    }\n"
"\n"
"    void setSex(char sex) {\n"
"        this.sex=sex;\n"
"    }\n"
"    public char getSex() {\n"
"        return sex;\n"
"    }\n"
"\n"
"    void setLitterId(int id) {\n"
"        this.litterId = id;\n"
"    }\n"
"    public int getLitterId() {\n"
"        return litterId;\n"
"    }\n"
"\n"
"    void setMother(Cat mother) {\n"
"        this.mother = mother;\n"
"    }\n"
"    public Cat getMother() {\n"
"        return mother;\n"
"    }\n"
"    void setKittens(Set kittens) {\n"
"        this.kittens = kittens;\n"
"    }\n"
"    public Set getKittens() {\n"
"        return kittens;\n"
"    }\n"
"    \n"
"    // addKitten not needed by Hibernate\n"
"    public void addKitten(Cat kitten) {\n"
"    kitten.setMother(this);\n"
"kitten.setLitterId( kittens.size() ); \n"
"        kittens.add(kitten);\n"
"    }\n"
"}"

#. Tag: para
#: persistent_classes.xml:57
#, no-c-format
msgid ""
"The four main rules of persistent classes are explored in more detail in the "
"following sections."
msgstr ""

#. Tag: title
#: persistent_classes.xml:62
#, no-c-format
msgid "Implement a no-argument constructor"
msgstr "引数のないコンストラクタを実装する"

#. Tag: para
#: persistent_classes.xml:64
#, fuzzy, no-c-format
msgid ""
"<classname>Cat</classname> has a no-argument constructor. All persistent "
"classes must have a default constructor (which can be non-public) so that "
"Hibernate can instantiate them using <literal><classname>java.lang.reflect."
"Constructor</classname>.newInstance()</literal>. It is recommended that this "
"constructor be defined with at least <emphasis>package</emphasis> visibility "
"in order for runtime proxy generation to work properly."
msgstr ""
"<literal>Cat</literal> には引数のないコンストラクタがあります。 Hibernate が "
"<literal>Constructor.newInstance()</literal> を使って永続クラスのインスタンス"
"化を行えるように、すべての永続クラスにはデフォルトコンストラクタ （public で"
"なくても構いません） がなければなりません。 Hibernate の実行時プロキシ生成の"
"ために、少なくとも <emphasis>package</emphasis> の可視性を持つデフォルトコン"
"ストラクタを強くお勧めします。"

#. Tag: title
#: persistent_classes.xml:74
#, fuzzy, no-c-format
msgid "Provide an identifier property"
msgstr "識別子プロパティを用意する（オプション）"

#. Tag: para
#: persistent_classes.xml:77
#, no-c-format
msgid ""
"Historically this was considered option. While still not (yet) enforced, "
"this should be considered a deprecated feature as it will be completely "
"required to provide a identifier property in an upcoming release."
msgstr ""

#. Tag: para
#: persistent_classes.xml:84
#, no-c-format
msgid ""
"<classname>Cat</classname> has a property named <literal>id</literal>. This "
"property maps to the primary key column(s) of the underlying database table. "
"The type of the identifier property can be any \"basic\" type (see <xref "
"linkend=\"types.value.basic\"/>). See <xref linkend=\"components-compositeid"
"\"/> for information on mapping composite (multi-column) identifiers."
msgstr ""

#. Tag: para
#: persistent_classes.xml:92
#, no-c-format
msgid ""
"Identifiers do not necessarily need to identify column(s) in the database "
"physically defined as a primary key. They should just identify columns that "
"can be used to uniquely identify rows in the underlying table."
msgstr ""

#. Tag: para
#: persistent_classes.xml:99
#, no-c-format
msgid ""
"We recommend that you declare consistently-named identifier properties on "
"persistent classes and that you use a nullable (i.e., non-primitive) type."
msgstr ""
"永続クラスには、一貫した名前の識別子プロパティを定義することをお勧めします。"
"さらに null 値を取れる(つまりプリミティブではない)型を使った方がよいでしょ"
"う。"

#. Tag: title
#: persistent_classes.xml:107
#, fuzzy, no-c-format
msgid "Prefer non-final classes (semi-optional)"
msgstr "final クラスにしない（オプション）"

#. Tag: para
#: persistent_classes.xml:109
#, no-c-format
msgid ""
"A central feature of Hibernate, <emphasis>proxies</emphasis> (lazy loading), "
"depends upon the persistent class being either non-final, or the "
"implementation of an interface that declares all public methods. You can "
"persist <literal>final</literal> classes that do not implement an interface "
"with Hibernate; you will not, however, be able to use proxies for lazy "
"association fetching which will ultimately limit your options for "
"performance tuning. To persist a <literal>final</literal> class which does "
"not implement a \"full\" interface you must disable proxy generation. See "
"<xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-xml\"/"
"> and <xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-"
"ann\"/>."
msgstr ""

#. Tag: title
#: persistent_classes.xml:121
#, no-c-format
msgid "Disabling proxies in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:122
#, no-c-format
msgid "<![CDATA[<class name=\"Cat\" lazy=\"false\"...>...</class>]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:126
#, no-c-format
msgid "Disabling proxies in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:127
#, no-c-format
msgid "<![CDATA[@Entity @Proxy(lazy=false) public class Cat { ... }]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:130
#, no-c-format
msgid ""
"If the <literal>final</literal> class does implement a proper interface, you "
"could alternatively tell Hibernate to use the interface instead when "
"generating the proxies. See <xref linkend=\"persistent-classes-pojo-final-"
"example-proxy-interface-xml\"/> and <xref linkend=\"persistent-classes-pojo-"
"final-example-proxy-interface-ann\"/>."
msgstr ""

#. Tag: title
#: persistent_classes.xml:139
#, no-c-format
msgid "Proxying an interface in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:140
#, no-c-format
msgid "<![CDATA[<class name=\"Cat\" proxy=\"ICat\"...>...</class>]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:144
#, no-c-format
msgid "Proxying an interface in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:145
#, no-c-format
msgid ""
"<![CDATA[@Entity @Proxy(proxyClass=ICat.class) public class Cat implements "
"ICat { ... }]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:148
#, fuzzy, no-c-format
msgid ""
"You should also avoid declaring <literal>public final</literal> methods as "
"this will again limit the ability to generate <emphasis>proxies</emphasis> "
"from this class. If you want to use a class with <literal>public final</"
"literal> methods, you must explicitly disable proxying. Again, see <xref "
"linkend=\"persistent-classes-pojo-final-example-disable-proxies-xml\"/> and "
"<xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-ann\"/"
">."
msgstr ""
"final ではないクラスで <literal>public final</literal> メソッドを定義すること"
"も避けるべきです。 <literal>public final</literal> メソッドを持つクラスを使い"
"たければ、 <literal>lazy=\"false\"</literal> と設定して明示的にプロキシを無効"
"にしなければなりません。"

#. Tag: title
#: persistent_classes.xml:158
#, no-c-format
msgid "Declare accessors and mutators for persistent fields (optional)"
msgstr "永続フィールドに対するアクセサとミューテータを定義する（オプション）"

#. Tag: para
#: persistent_classes.xml:160
#, fuzzy, no-c-format
msgid ""
"<classname>Cat</classname> declares accessor methods for all its persistent "
"fields. Many other ORM tools directly persist instance variables. It is "
"better to provide an indirection between the relational schema and internal "
"data structures of the class. By default, Hibernate persists JavaBeans style "
"properties and recognizes method names of the form <literal>getFoo</"
"literal>, <literal>isFoo</literal> and <literal>setFoo</literal>. If "
"required, you can switch to direct field access for particular properties."
msgstr ""
"<literal>Cat</literal> ではすべての永続フィールドに対してアクセサメソッドを定"
"義しています。他の多くの ORM ツールは、永続インスタンス変数を直接永続化しま"
"す。私たちはリレーショナルスキーマとクラスの内部構造を分離する方が良いと信じ"
"ています。デフォルトでは、 Hibernate は JavaBean スタイルのプロパティを永続化"
"し、 <literal>getFoo</literal>, <literal>isFoo</literal>, <literal>setFoo</"
"literal> 形式のメソッド名を認識します。しかし必要なら、特定のプロパティに対し"
"て、直接のフィールドアクセスに切り替えることは可能です。"

#. Tag: para
#: persistent_classes.xml:169
#, fuzzy, no-c-format
msgid ""
"Properties need <emphasis>not</emphasis> be declared public. Hibernate can "
"persist a property declared with <literal>package</literal>, "
"<literal>protected</literal> or <literal>private</literal> visibility as "
"well."
msgstr ""
"プロパティは public で宣言する必要は <emphasis>ありません</emphasis> 。 "
"Hibernate はデフォルトで、 <literal>protected</literal> もしくは "
"<literal>private</literal> の get / set のペアを持つプロパティを永続化するこ"
"とができます。"

#. Tag: title
#: persistent_classes.xml:178
#, no-c-format
msgid "Implementing inheritance"
msgstr "継承の実装"

#. Tag: para
#: persistent_classes.xml:180
#, no-c-format
msgid ""
"A subclass must also observe the first and second rules. It inherits its "
"identifier property from the superclass, <literal>Cat</literal>. For example:"
msgstr ""
"サブクラスも1番目と2番目のルールを守らなければなりません。サブクラスはスー"
"パークラス <literal>Cat</literal> から識別子プロパティを継承します。"

#. Tag: programlisting
#: persistent_classes.xml:184
#, fuzzy, no-c-format
msgid ""
"package eg;\n"
"\n"
"public class DomesticCat extends Cat {\n"
"        private String name;\n"
"\n"
"        public String getName() {\n"
"                return name;\n"
"        }\n"
"        protected void setName(String name) {\n"
"                this.name=name;\n"
"        }\n"
"}"
msgstr ""
"package eg;\n"
"\n"
"public class DomesticCat extends Cat {\n"
"        private String name;\n"
"\n"
"        public String getName() {\n"
"                return name;\n"
"        }\n"
"        protected void setName(String name) {\n"
"                this.name=name;\n"
"        }\n"
"}"

#. Tag: title
#: persistent_classes.xml:188
#, no-c-format
msgid ""
"Implementing <literal>equals()</literal> and <literal>hashCode()</literal>"
msgstr "<literal>equals()</literal> と <literal>hashCode()</literal>の実装"

#. Tag: para
#: persistent_classes.xml:191
#, no-c-format
msgid ""
"You have to override the <literal>equals()</literal> and <literal>hashCode()"
"</literal> methods if you:"
msgstr ""
"以下の条件の場合、 <literal>equals()</literal> と <literal>hashCode()</"
"literal> メソッドをオーバーライドしなければなりません、"

#. Tag: para
#: persistent_classes.xml:196
#, no-c-format
msgid ""
"intend to put instances of persistent classes in a <literal>Set</literal> "
"(the recommended way to represent many-valued associations); <emphasis>and</"
"emphasis>"
msgstr ""
"永続クラスのインスタンスを <literal>Set</literal> に置く場合。 （これは多値の"
"関連を表現するおすすめの方法です） <emphasis>そして同時に</emphasis>"

#. Tag: para
#: persistent_classes.xml:202
#, no-c-format
msgid "intend to use reattachment of detached instances"
msgstr "分離インスタンスをセッションへ再追加する場合。"

#. Tag: para
#: persistent_classes.xml:206
#, no-c-format
msgid ""
"Hibernate guarantees equivalence of persistent identity (database row) and "
"Java identity only inside a particular session scope. When you mix instances "
"retrieved in different sessions, you must implement <literal>equals()</"
"literal> and <literal>hashCode()</literal> if you wish to have meaningful "
"semantics for <literal>Set</literal>s."
msgstr ""
"Hibernate は、永続 ID （データベースの行）と、特定のセッションスコープ内に限"
"定ですが Java ID とが等価であることを保証します。ですから異なるセッションで検"
"索したインスタンスを組み合わせる場合、 <literal>Set</literal> に意味のあるセ"
"マンティクスを持たせようと思っているならすぐに <literal>equals()</literal> "
"と <literal>hashCode()</literal> を実装しなければなりません。"

#. Tag: para
#: persistent_classes.xml:212
#, no-c-format
msgid ""
"The most obvious way is to implement <literal>equals()</literal>/"
"<literal>hashCode()</literal> by comparing the identifier value of both "
"objects. If the value is the same, both must be the same database row, "
"because they are equal. If both are added to a <literal>Set</literal>, you "
"will only have one element in the <literal>Set</literal>). Unfortunately, "
"you cannot use that approach with generated identifiers. Hibernate will only "
"assign identifier values to objects that are persistent; a newly created "
"instance will not have any identifier value. Furthermore, if an instance is "
"unsaved and currently in a <literal>Set</literal>, saving it will assign an "
"identifier value to the object. If <literal>equals()</literal> and "
"<literal>hashCode()</literal> are based on the identifier value, the hash "
"code would change, breaking the contract of the <literal>Set</literal>. See "
"the Hibernate website for a full discussion of this problem. This is not a "
"Hibernate issue, but normal Java semantics of object identity and equality."
msgstr ""
"最も明白な方法は、両方のオブジェクトの識別子の値の比較によって "
"<literal>equals()</literal>と <literal>hashCode()</literal> を実装する方法で"
"す。値が同じなら、両者はデータベースの同じ行でなければならないため等しくなり"
"ます。 （両者が <literal>Set</literal> に追加されても、 <literal>Set</"
"literal> には1個の要素しかないことになります） 残念なことに、生成された識別子"
"にはこのアプローチを使うことができません。 Hibernate は永続化されたオブジェク"
"トへ識別子の値を代入するだけであり、新しく作成されたインスタンスはどのような"
"識別子の値も持っていません。さらに、インスタンスがセーブされておらず、現在 "
"<literal>Set</literal> の中にあれば、セーブするとオブジェクトへ識別子の値を代"
"入することになります。もし <literal>equals()</literal> と <literal>hashCode()"
"</literal> が識別子の値に基づいているなら、ハッシュコードが変更されると "
"<literal>Set</literal> の規約が破られます。この問題についての完全な議論は、 "
"Hibernate のウェブサイトを見てください。これは Hibernate の問題ではなく、オブ"
"ジェクトの同一性と等価性についての、通常の Java のセマンティクスであることに"
"注意してください。"

#. Tag: para
#: persistent_classes.xml:228
#, no-c-format
msgid ""
"It is recommended that you implement <literal>equals()</literal> and "
"<literal>hashCode()</literal> using <emphasis>Business key equality</"
"emphasis>. Business key equality means that the <literal>equals()</literal> "
"method compares only the properties that form the business key. It is a key "
"that would identify our instance in the real world (a <emphasis>natural</"
"emphasis> candidate key):"
msgstr ""
"<emphasis>ビジネスキーの等価性</emphasis> を使って、 <literal>equals()</"
"literal> と <literal>hashCode()</literal> を実装することをお勧めします。ビジ"
"ネスキーの等価性とは、 <literal>equals()</literal> メソッドが、ビジネスキー、"
"つまり現実の世界においてインスタンスを特定するキー（<emphasis>自然</"
"emphasis> 候補キー） を形成するプロパティだけを比較することを意味します。"

#. Tag: programlisting
#: persistent_classes.xml:235
#, fuzzy, no-c-format
msgid ""
"public class Cat {\n"
"\n"
"    ...\n"
"    public boolean equals(Object other) {\n"
"        if (this == other) return true;\n"
"        if ( !(other instanceof Cat) ) return false;\n"
"\n"
"        final Cat cat = (Cat) other;\n"
"\n"
"        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
"        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
"\n"
"        return true;\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        int result;\n"
"        result = getMother().hashCode();\n"
"        result = 29 * result + getLitterId();\n"
"        return result;\n"
"    }\n"
"\n"
"}"
msgstr ""
"public class Cat {\n"
"\n"
"    ...\n"
"    public boolean equals(Object other) {\n"
"        if (this == other) return true;\n"
"        if ( !(other instanceof Cat) ) return false;\n"
"\n"
"        final Cat cat = (Cat) other;\n"
"\n"
"        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
"        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
"\n"
"        return true;\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        int result;\n"
"        result = getMother().hashCode();\n"
"        result = 29 * result + getLitterId();\n"
"        return result;\n"
"    }\n"
"\n"
"}"

#. Tag: para
#: persistent_classes.xml:237
#, fuzzy, no-c-format
msgid ""
"A business key does not have to be as solid as a database primary key "
"candidate (see <xref linkend=\"transactions-basics-identity\"/>). Immutable "
"or unique properties are usually good candidates for a business key."
msgstr ""
"ビジネスキーはデータベースの主キー候補ほど安定である必要はないことに注意して"
"ください （<xref linkend=\"transactions-basics-identity\"/> を参照してくださ"
"い）。更新不可なプロパティやユニークなプロパティは、通常ビジネスキーのよい候"
"補です。"

#. Tag: title
#: persistent_classes.xml:244
#, no-c-format
msgid "Dynamic models"
msgstr "動的モデル"

#. Tag: title
#: persistent_classes.xml:247
#, no-c-format
msgid "Note"
msgstr "注意"

#. Tag: emphasis
#: persistent_classes.xml:249
#, fuzzy, no-c-format
msgid ""
"The following features are currently considered experimental and may change "
"in the near future."
msgstr ""
"以下の機能は現在実験段階にあると見なされており、近い将来変更される可能性があ"
"ることに注意してください。"

#. Tag: para
#: persistent_classes.xml:253
#, no-c-format
msgid ""
"Persistent entities do not necessarily have to be represented as POJO "
"classes or as JavaBean objects at runtime. Hibernate also supports dynamic "
"models (using <literal>Map</literal>s of <literal>Map</literal>s at runtime) "
"and the representation of entities as DOM4J trees. With this approach, you "
"do not write persistent classes, only mapping files."
msgstr ""
"永続エンティティは、必ずしも実行時に POJO クラスや JavaBean オブジェクトで表"
"現する必要はありません。 Hibernate は（実行時に <literal>Map</literal> の "
"<literal>Map</literal> を使う）動的モデルと、 DOM4J ツリーとしてのエンティ"
"ティの表現もサポートします。このアプローチを使うと永続クラスを書かず、マッピ"
"ングファイルだけを書くことになります。"

#. Tag: para
#: persistent_classes.xml:259
#, fuzzy, no-c-format
msgid ""
"By default, Hibernate works in normal POJO mode. You can set a default "
"entity representation mode for a particular <literal>SessionFactory</"
"literal> using the <literal>default_entity_mode</literal> configuration "
"option (see <xref linkend=\"configuration-optional-properties\"/>)."
msgstr ""
"デフォルトでは、 Hibernate は通常の POJO モードで動作します。 "
"<literal>default_entity_mode</literal> 設定オプションを使って、特定の "
"<literal>SessionFactory</literal> に対するデフォルトのエンティティ表現モード"
"を設定することができます （<xref linkend=\"configuration-optional-properties"
"\"/> を見てください）。"

#. Tag: para
#: persistent_classes.xml:265
#, no-c-format
msgid ""
"The following examples demonstrate the representation using <literal>Map</"
"literal>s. First, in the mapping file an <literal>entity-name</literal> has "
"to be declared instead of, or in addition to, a class name:"
msgstr ""
"以下の例では <literal>Map</literal> を使った表現を紹介します。まずマッピング"
"ファイルで、クラス名の代わりに（またはそれに加えて） <literal>entity-name</"
"literal> を定義しなければなりません："

#. Tag: programlisting
#: persistent_classes.xml:270
#, fuzzy, no-c-format
msgid ""
"&lt;hibernate-mapping&gt;\n"
"\n"
"    &lt;class entity-name=\"Customer\"&gt;\n"
"\n"
"        &lt;id name=\"id\"\n"
"            type=\"long\"\n"
"            column=\"ID\"&gt;\n"
"            &lt;generator class=\"sequence\"/&gt;\n"
"        &lt;/id&gt;\n"
"\n"
"        &lt;property name=\"name\"\n"
"            column=\"NAME\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;property name=\"address\"\n"
"            column=\"ADDRESS\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;many-to-one name=\"organization\"\n"
"            column=\"ORGANIZATION_ID\"\n"
"            class=\"Organization\"/&gt;\n"
"\n"
"        &lt;bag name=\"orders\"\n"
"            inverse=\"true\"\n"
"            lazy=\"false\"\n"
"            cascade=\"all\"&gt;\n"
"            &lt;key column=\"CUSTOMER_ID\"/&gt;\n"
"            &lt;one-to-many class=\"Order\"/&gt;\n"
"        &lt;/bag&gt;\n"
"\n"
"    &lt;/class&gt;\n"
"    \n"
"&lt;/hibernate-mapping&gt;"
msgstr ""
"&lt;hibernate-mapping&gt;\n"
"\n"
"    &lt;class entity-name=\"Customer\"&gt;\n"
"\n"
"        &lt;id name=\"id\"\n"
"            type=\"long\"\n"
"            column=\"ID\"&gt;\n"
"            &lt;generator class=\"sequence\"/&gt;\n"
"        &lt;/id&gt;\n"
"\n"
"        &lt;property name=\"name\"\n"
"            column=\"NAME\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;property name=\"address\"\n"
"            column=\"ADDRESS\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;many-to-one name=\"organization\"\n"
"            column=\"ORGANIZATION_ID\"\n"
"            class=\"Organization\"/&gt;\n"
"\n"
"        &lt;bag name=\"orders\"\n"
"            inverse=\"true\"\n"
"            lazy=\"false\"\n"
"            cascade=\"all\"&gt;\n"
"            &lt;key column=\"CUSTOMER_ID\"/&gt;\n"
"            &lt;one-to-many class=\"Order\"/&gt;\n"
"        &lt;/bag&gt;\n"
"\n"
"    &lt;/class&gt;\n"
"    \n"
"&lt;/hibernate-mapping&gt;"

#. Tag: para
#: persistent_classes.xml:272
#, no-c-format
msgid ""
"Even though associations are declared using target class names, the target "
"type of associations can also be a dynamic entity instead of a POJO."
msgstr ""
"関連がターゲットのクラス名を使って定義していたとしても、関連のターゲット型も "
"POJO ではなく動的なエンティティでも構わないことに注意してください。"

#. Tag: para
#: persistent_classes.xml:276
#, no-c-format
msgid ""
"After setting the default entity mode to <literal>dynamic-map</literal> for "
"the <literal>SessionFactory</literal>, you can, at runtime, work with "
"<literal>Map</literal>s of <literal>Map</literal>s:"
msgstr ""
"<literal>SessionFactory</literal> に対してデフォルトのエンティティモードを "
"<literal>dynamic-map</literal> に設定した後、実行時に <literal>Map</literal> "
"の <literal>Map</literal> を使うことができます："

#. Tag: programlisting
#: persistent_classes.xml:281
#, fuzzy, no-c-format
msgid ""
"Session s = openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"\n"
"// Create an organization\n"
"Map foobar = new HashMap();\n"
"foobar.put(\"name\", \"Foobar Inc.\");\n"
"\n"
"// Link both\n"
"david.put(\"organization\", foobar);\n"
"\n"
"// Save both\n"
"s.save(\"Customer\", david);\n"
"s.save(\"Organization\", foobar);\n"
"\n"
"tx.commit();\n"
"s.close();"
msgstr ""
"Session s = openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"Session s = openSession();\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"\n"
"// Create an organization\n"
"Map foobar = new HashMap();\n"
"foobar.put(\"name\", \"Foobar Inc.\");\n"
"\n"
"// Link both\n"
"david.put(\"organization\", foobar);\n"
"\n"
"// Save both\n"
"s.save(\"Customer\", david);\n"
"s.save(\"Organization\", foobar);\n"
"\n"
"tx.commit();\n"
"s.close();"

#. Tag: para
#: persistent_classes.xml:283
#, no-c-format
msgid ""
"One of the main advantages of dynamic mapping is quick turnaround time for "
"prototyping, without the need for entity class implementation. However, you "
"lose compile-time type checking and will likely deal with many exceptions at "
"runtime. As a result of the Hibernate mapping, the database schema can "
"easily be normalized and sound, allowing to add a proper domain model "
"implementation on top later on."
msgstr ""
"動的なマッピングの利点は、エンティティクラスの実装を必要としないため、プロト"
"タイピングに要するターンアラウンドタイムが早いということです。しかしコンパイ"
"ル時の型チェックがないので、実行時に非常に多くの例外処理を扱わなければならな"
"いでしょう。 Hibernate マッピングのおかげで、データベーススキーマは容易に正規"
"化でき、健全になり、後で適切なドメインモデルの実装を追加することが可能になり"
"ます。"

#. Tag: para
#: persistent_classes.xml:290
#, no-c-format
msgid ""
"Entity representation modes can also be set on a per <literal>Session</"
"literal> basis:"
msgstr ""
"エンティティ表現モードは <literal>Session</literal> ごとに設定することも可能"
"です。"

#. Tag: programlisting
#: persistent_classes.xml:293
#, fuzzy, no-c-format
msgid ""
"Session dynamicSession = pojoSession.getSession(EntityMode.MAP);\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"dynamicSession.save(\"Customer\", david);\n"
"...\n"
"dynamicSession.flush();\n"
"dynamicSession.close()\n"
"...\n"
"// Continue on pojoSession"
msgstr ""
"Session dynamicSession = pojoSession.getSession(EntityMode.MAP);\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"dynamicSession.save(\"Customer\", david);\n"
"...\n"
"dynamicSession.flush();\n"
"dynamicSession.close()\n"
"...\n"
"// Continue on pojoSession"

#. Tag: para
#: persistent_classes.xml:295
#, no-c-format
msgid ""
"Please note that the call to <literal>getSession()</literal> using an "
"<literal>EntityMode</literal> is on the <literal>Session</literal> API, not "
"the <literal>SessionFactory</literal>. That way, the new <literal>Session</"
"literal> shares the underlying JDBC connection, transaction, and other "
"context information. This means you do not have to call <literal>flush()</"
"literal> and <literal>close()</literal> on the secondary <literal>Session</"
"literal>, and also leave the transaction and connection handling to the "
"primary unit of work."
msgstr ""
"<literal>EntityMode</literal> を使った <literal>getSession()</literal> の呼び"
"出しは <literal>SessionFactory</literal> ではなく <literal>Session</literal> "
"APIにあることに注意してください。その方法では、新しい <literal>Session</"
"literal> は、ベースとなる JDBC コネクション、トランザクション、その他のコンテ"
"キスト情報を共有します。これは2番目の <literal>Session</literal> では "
"<literal>flush()</literal> と <literal>close()</literal> を呼ぶ必要がないとい"
"うこと、そのためトランザクションとコネクションの管理を1番目の作業単位(Unit "
"of Work)に任せることができるということです。"

#. Tag: para
#: persistent_classes.xml:304
#, fuzzy, no-c-format
msgid ""
"More information about the XML representation capabilities can be found in "
"<xref linkend=\"xml\"/>."
msgstr ""
"XML 表現の能力についてのさらなる情報は <xref linkend=\"xml\"/> に記述されてい"
"ます。"

#. Tag: title
#: persistent_classes.xml:310
#, no-c-format
msgid "Tuplizers"
msgstr "Tuplizer"

#. Tag: para
#: persistent_classes.xml:312
#, fuzzy, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.Tuplizer</interfacename> and its sub-"
"interfaces are responsible for managing a particular representation of a "
"piece of data given that representation's <classname>org.hibernate."
"EntityMode</classname>. If a given piece of data is thought of as a data "
"structure, then a tuplizer is the thing that knows how to create such a data "
"structure, how to extract values from such a data structure and how to "
"inject values into such a data structure. For example, for the POJO entity "
"mode, the corresponding tuplizer knows how create the POJO through its "
"constructor. It also knows how to access the POJO properties using the "
"defined property accessors."
msgstr ""
"<literal>org.hibernate.tuple.Tuplizer</literal> とそのサブインターフェース"
"は、表現の <literal>org.hibernate.EntityMode</literal> を利用して、データ断片"
"のある表現の管理に責任を持ちます。与えられたデータ断片をデータ構造として考え"
"るなら、 Tuplizer はそのようなデータ構造をどのように作成するかを知り、そのよ"
"うなデータ構造からどのように値を抽出し、注入するかを知っています。例えば "
"POJO エンティティモードでは、対応する Tuplizer はコンストラクタを通して、 "
"POJO をどのように作成するか、定義されたプロパティアクセサを使い、 POJO プロパ"
"ティにどのようにアクセスするかを知ります。"

#. Tag: para
#: persistent_classes.xml:322
#, no-c-format
msgid "There are two (high-level) types of Tuplizers:"
msgstr ""

#. Tag: para
#: persistent_classes.xml:326
#, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.entity.EntityTuplizer</interfacename> "
"which is responsible for managing the above mentioned contracts in regards "
"to entities"
msgstr ""

#. Tag: para
#: persistent_classes.xml:332
#, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.component.ComponentTuplizer</"
"interfacename> which does the same for components"
msgstr ""

#. Tag: para
#: persistent_classes.xml:340
#, fuzzy, no-c-format
msgid ""
"Users can also plug in their own tuplizers. Perhaps you require that "
"<interfacename>java.util.Map</interfacename> implementation other than "
"<classname>java.util.HashMap</classname> be used while in the dynamic-map "
"entity-mode. Or perhaps you need to define a different proxy generation "
"strategy than the one used by default. Both would be achieved by defining a "
"custom tuplizer implementation. Tuplizer definitions are attached to the "
"entity or component mapping they are meant to manage. Going back to the "
"example of our <classname>Customer</classname> entity, <xref linkend="
"\"example-specify-custom-tuplizer-ann\"/> shows how to specify a custom "
"<interfacename>org.hibernate.tuple.entity.EntityTuplizer</interfacename> "
"using annotations while <xref linkend=\"example-specify-custom-tuplizer-xml"
"\"/> shows how to do the same in <literal>hbm.xml</literal>"
msgstr ""
"ユーザーは独自の Tuplizer に差し替えることも可能です。おそらく dynamic-map "
"entity-mode の際に <literal>java.util.HashMap</literal> を使うのではなく、 "
"<literal>java.util.Map</literal> の実装が必要でしょう。もしくは、おそらくデ"
"フォルトのものではなく、別のプロキシ生成戦略の定義が必要でしょう。両者とも、"
"カスタムの Tuplizer 実装を定義することで達成されます。 Tuplizer の定義は、管"
"理しようとするエンティティやコンポーネントのマッピングに結び付けられます。顧"
"客エンティティの例は以下になります："

#. Tag: title
#: persistent_classes.xml:353
#, no-c-format
msgid "Specify custom tuplizers in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:354
#, no-c-format
msgid ""
"@Entity\n"
"@Tuplizer(impl = DynamicEntityTuplizer.class)\n"
"public interface Cuisine {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long getId();\n"
"    public void setId(Long id);\n"
"\n"
"    public String getName();\n"
"    public void setName(String name);\n"
"\n"
"    @Tuplizer(impl = DynamicComponentTuplizer.class)\n"
"    public Country getCountry();\n"
"    public void setCountry(Country country);\n"
"}"
msgstr ""

#. Tag: title
#: persistent_classes.xml:357
#, no-c-format
msgid "Specify custom tuplizers in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:358
#, no-c-format
msgid ""
"&lt;hibernate-mapping&gt;\n"
"    &lt;class entity-name=\"Customer\"&gt;\n"
"        &lt;!--\n"
"            Override the dynamic-map entity-mode\n"
"            tuplizer for the customer entity\n"
"        --&gt;\n"
"        &lt;tuplizer entity-mode=\"dynamic-map\"\n"
"                class=\"CustomMapTuplizerImpl\"/&gt;\n"
"\n"
"        &lt;id name=\"id\" type=\"long\" column=\"ID\"&gt;\n"
"            &lt;generator class=\"sequence\"/&gt;\n"
"        &lt;/id&gt;\n"
"\n"
"        &lt;!-- other properties --&gt;\n"
"        ...\n"
"    &lt;/class&gt;\n"
"&lt;/hibernate-mapping&gt;"
msgstr ""

#. Tag: title
#: persistent_classes.xml:363
#, fuzzy, no-c-format
msgid "EntityNameResolvers"
msgstr "エンティティリゾルバ"

#. Tag: para
#: persistent_classes.xml:365
#, no-c-format
msgid ""
"<interfacename>org.hibernate.EntityNameResolver</interfacename> is a "
"contract for resolving the entity name of a given entity instance. The "
"interface defines a single method <methodname>resolveEntityName</methodname> "
"which is passed the entity instance and is expected to return the "
"appropriate entity name (null is allowed and would indicate that the "
"resolver does not know how to resolve the entity name of the given entity "
"instance). Generally speaking, an <interfacename>org.hibernate."
"EntityNameResolver</interfacename> is going to be most useful in the case of "
"dynamic models. One example might be using proxied interfaces as your domain "
"model. The hibernate test suite has an example of this exact style of usage "
"under the <package>org.hibernate.test.dynamicentity.tuplizer2</package>. "
"Here is some of the code from that package for illustration."
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:377
#, no-c-format
msgid ""
"/**\n"
" * A very trivial JDK Proxy InvocationHandler implementation where we proxy "
"an\n"
" * interface as the domain model and simply store persistent state in an "
"internal\n"
" * Map.  This is an extremely trivial example meant only for illustration.\n"
" */\n"
"public final class DataProxyHandler implements InvocationHandler {\n"
"        private String entityName;\n"
"        private HashMap data = new HashMap();\n"
"\n"
"        public DataProxyHandler(String entityName, Serializable id) {\n"
"                this.entityName = entityName;\n"
"                data.put( \"Id\", id );\n"
"        }\n"
"\n"
"        public Object invoke(Object proxy, Method method, Object[] args) "
"throws Throwable {\n"
"                String methodName = method.getName();\n"
"                if ( methodName.startsWith( \"set\" ) ) {\n"
"                        String propertyName = methodName.substring( 3 );\n"
"                        data.put( propertyName, args[0] );\n"
"                }\n"
"                else if ( methodName.startsWith( \"get\" ) ) {\n"
"                        String propertyName = methodName.substring( 3 );\n"
"                        return data.get( propertyName );\n"
"                }\n"
"                else if ( \"toString\".equals( methodName ) ) {\n"
"                        return entityName + \"#\" + data.get( \"Id\" );\n"
"                }\n"
"                else if ( \"hashCode\".equals( methodName ) ) {\n"
"                        return new Integer( this.hashCode() );\n"
"                }\n"
"                return null;\n"
"        }\n"
"\n"
"        public String getEntityName() {\n"
"                return entityName;\n"
"        }\n"
"\n"
"        public HashMap getData() {\n"
"                return data;\n"
"        }\n"
"}\n"
"\n"
"public class ProxyHelper {\n"
"    public static String extractEntityName(Object object) {\n"
"        // Our custom java.lang.reflect.Proxy instances actually bundle\n"
"        // their appropriate entity name, so we simply extract it from "
"there\n"
"        // if this represents one of our proxies; otherwise, we return null\n"
"        if ( Proxy.isProxyClass( object.getClass() ) ) {\n"
"            InvocationHandler handler = Proxy.getInvocationHandler"
"( object );\n"
"            if ( DataProxyHandler.class.isAssignableFrom( handler.getClass"
"() ) ) {\n"
"                DataProxyHandler myHandler = ( DataProxyHandler ) handler;\n"
"                return myHandler.getEntityName();\n"
"            }\n"
"        }\n"
"        return null;\n"
"    }\n"
"\n"
"    // various other utility methods ....\n"
"\n"
"}\n"
"\n"
"/**\n"
" * The EntityNameResolver implementation.\n"
" *\n"
" * IMPL NOTE : An EntityNameResolver really defines a strategy for how "
"entity names\n"
" * should be resolved.  Since this particular impl can handle resolution for "
"all of our\n"
" * entities we want to take advantage of the fact that SessionFactoryImpl "
"keeps these\n"
" * in a Set so that we only ever have one instance registered.  Why?  Well, "
"when it\n"
" * comes time to resolve an entity name, Hibernate must iterate over all the "
"registered\n"
" * resolvers.  So keeping that number down helps that process be as speedy "
"as possible.\n"
" * Hence the equals and hashCode implementations as is\n"
" */\n"
"public class MyEntityNameResolver implements EntityNameResolver {\n"
"    public static final MyEntityNameResolver INSTANCE = new "
"MyEntityNameResolver();\n"
"\n"
"    public String resolveEntityName(Object entity) {\n"
"        return ProxyHelper.extractEntityName( entity );\n"
"    }\n"
"\n"
"    public boolean equals(Object obj) {\n"
"        return getClass().equals( obj.getClass() );\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        return getClass().hashCode();\n"
"    }\n"
"}\n"
"\n"
"public class MyEntityTuplizer extends PojoEntityTuplizer {\n"
"        public MyEntityTuplizer(EntityMetamodel entityMetamodel, "
"PersistentClass mappedEntity) {\n"
"                super( entityMetamodel, mappedEntity );\n"
"        }\n"
"\n"
"        public EntityNameResolver[] getEntityNameResolvers() {\n"
"                return new EntityNameResolver[] { MyEntityNameResolver."
"INSTANCE };\n"
"        }\n"
"\n"
"    public String determineConcreteSubclassEntityName(Object entityInstance, "
"SessionFactoryImplementor factory) {\n"
"        String entityName = ProxyHelper.extractEntityName"
"( entityInstance );\n"
"        if ( entityName == null ) {\n"
"            entityName = super.determineConcreteSubclassEntityName"
"( entityInstance, factory );\n"
"        }\n"
"        return entityName;\n"
"    }\n"
"\n"
"    ..."
msgstr ""

#. Tag: para
#: persistent_classes.xml:379
#, no-c-format
msgid ""
"In order to register an <interfacename>org.hibernate.EntityNameResolver</"
"interfacename> users must either:"
msgstr ""

#. Tag: para
#: persistent_classes.xml:383
#, no-c-format
msgid ""
"Implement a custom tuplizer (see <xref linkend=\"persistent-classes-tuplizers"
"\"/>), implementing the <methodname>getEntityNameResolvers</methodname> "
"method"
msgstr ""

#. Tag: para
#: persistent_classes.xml:389
#, no-c-format
msgid ""
"Register it with the <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (which is the implementation class for <interfacename>org."
"hibernate.SessionFactory</interfacename>) using the "
"<methodname>registerEntityNameResolver</methodname> method."
msgstr ""

#, fuzzy
#~ msgid ""
#~ "Most Java applications require a persistent class representing felines. "
#~ "For example:"
#~ msgstr "以下はネコ科の動物を表現する永続クラスです。"

#, fuzzy
#~ msgid ""
#~ "<literal>Cat</literal> has a property called <literal>id</literal>. This "
#~ "property maps to the primary key column of a database table. The property "
#~ "might have been called anything, and its type might have been any "
#~ "primitive type, any primitive \"wrapper\" type, <literal>java.lang."
#~ "String</literal> or <literal>java.util.Date</literal>. If your legacy "
#~ "database table has composite keys, you can use a user-defined class with "
#~ "properties of these types (see the section on composite identifiers later "
#~ "in the chapter.)"
#~ msgstr ""
#~ "<literal>Cat</literal> には <literal>id</literal> というプロパティがありま"
#~ "す。このプロパティはデータベーステーブルの主キーカラムへマッピングされま"
#~ "す。このプロパティの名前は何でも構いませんし、型はどのようなプリミティブ型"
#~ "でも、プリミティブの「ラッパー」型でも、 <literal>java.lang.String</"
#~ "literal> や <literal>java.util.Date</literal> でも構いません。 （もしレガ"
#~ "シーデータベーステーブルが複合キーを持つならば、今述べたような型のプロパ"
#~ "ティを持つユーザー定義のクラスを使うことさえ可能です。後で複合識別子のセク"
#~ "ションを見てください。）"

#~ msgid ""
#~ "The identifier property is strictly optional. You can leave them off and "
#~ "let Hibernate keep track of object identifiers internally. We do not "
#~ "recommend this, however."
#~ msgstr ""
#~ "識別子プロパティは厳密にはオプションです。これを省略して、 Hibernate に内"
#~ "部的にオブジェクトの識別子を追跡させることは可能です。しかしお勧めはしませ"
#~ "ん。"

#~ msgid ""
#~ "In fact, some functionality is available only to classes that declare an "
#~ "identifier property:"
#~ msgstr ""
#~ "実際に、識別子プロパティを宣言するクラスだけが利用可能な機能がいくつかあり"
#~ "ます："

#, fuzzy
#~ msgid ""
#~ "Transitive reattachment for detached objects (cascade update or cascade "
#~ "merge) - see <xref linkend=\"objectstate-transitive\" />"
#~ msgstr ""
#~ "分離オブジェクトの連鎖的な再追加（カスケード更新やカスケードマージ） - "
#~ "<xref linkend=\"objectstate-transitive\" />次を参照してください。"

#, fuzzy
#~ msgid "<literal>Session.saveOrUpdate()</literal>"
#~ msgstr "<xref linkend=\"objectstate-transitive\" />"

#, fuzzy
#~ msgid "<literal>Session.merge()</literal>"
#~ msgstr "<literal>Session.merge()</literal>"

#~ msgid ""
#~ "A central feature of Hibernate, <emphasis>proxies</emphasis>, depends "
#~ "upon the persistent class being either non-final, or the implementation "
#~ "of an interface that declares all public methods."
#~ msgstr ""
#~ "Hibernate の中心的な特徴である <emphasis>プロキシ</emphasis> は、永続クラ"
#~ "スが final でないこと、またはメソッドを全部 public で宣言しているインター"
#~ "フェースが実装されているかに依存しています。"

#~ msgid ""
#~ "You can persist <literal>final</literal> classes that do not implement an "
#~ "interface with Hibernate. You will not, however, be able to use proxies "
#~ "for lazy association fetching which will ultimately limit your options "
#~ "for performance tuning."
#~ msgstr ""
#~ "Hibernate でインターフェースを実装していない <literal>final</literal> クラ"
#~ "スを永続化することはできますが、遅延関連フェッチに対してプロキシを使うこと"
#~ "はできなくなります。これはパフォーマンスチューニングへの選択肢を狭めること"
#~ "になります。"

#~ msgid ""
#~ "There are two high-level types of Tuplizers, represented by the "
#~ "<literal>org.hibernate.tuple.entity.EntityTuplizer</literal> and "
#~ "<literal>org.hibernate.tuple.component.ComponentTuplizer</literal> "
#~ "interfaces. <literal>EntityTuplizer</literal>s are responsible for "
#~ "managing the above mentioned contracts in regards to entities, while "
#~ "<literal>ComponentTuplizer</literal>s do the same for components."
#~ msgstr ""
#~ "Tuplizer には二つのハイレベルの型があります。それらは、<literal>org."
#~ "hibernate.tuple.entity.EntityTuplizer</literal> と <literal>org.hibernate."
#~ "tuple.component.ComponentTuplizer</literal> インターフェースで表現されま"
#~ "す。 <literal>EntityTuplizer</literal> は上で述べたようなエンティティに関"
#~ "する契約の管理に責任を持ちます。一方、 <literal>ComponentTuplizer</"
#~ "literal> はコンポーネントに関する契約の管理に責任を持ちます。"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<hibernate-mapping>\n"
#~ "    <class entity-name=\"Customer\">\n"
#~ "        <!--\n"
#~ "            Override the dynamic-map entity-mode\n"
#~ "            tuplizer for the customer entity\n"
#~ "        -->\n"
#~ "        <tuplizer entity-mode=\"dynamic-map\"\n"
#~ "                class=\"CustomMapTuplizerImpl\"/>\n"
#~ "\n"
#~ "        <id name=\"id\" type=\"long\" column=\"ID\">\n"
#~ "            <generator class=\"sequence\"/>\n"
#~ "        </id>\n"
#~ "\n"
#~ "        <!-- other properties -->\n"
#~ "        ...\n"
#~ "    </class>\n"
#~ "</hibernate-mapping>\n"
#~ "\n"
#~ "\n"
#~ "public class CustomMapTuplizerImpl\n"
#~ "        extends org.hibernate.tuple.entity.DynamicMapEntityTuplizer {\n"
#~ "    // override the buildInstantiator() method to plug in our custom "
#~ "map...\n"
#~ "    protected final Instantiator buildInstantiator(\n"
#~ "            org.hibernate.mapping.PersistentClass mappingInfo) {\n"
#~ "        return new CustomMapInstantiator( mappingInfo );\n"
#~ "    }\n"
#~ "\n"
#~ "    private static final class CustomMapInstantiator\n"
#~ "            extends org.hibernate.tuple.DynamicMapInstantitor {\n"
#~ "        // override the generateMap() method to return our custom map...\n"
#~ "            protected final Map generateMap() {\n"
#~ "                    return new CustomMap();\n"
#~ "            }\n"
#~ "    }\n"
#~ "}]]>"
#~ msgstr ""
#~ "&lt;hibernate-mapping&gt;\n"
#~ "    &lt;class entity-name=\"Customer\"&gt;\n"
#~ "        &lt;!--\n"
#~ "            Override the dynamic-map entity-mode\n"
#~ "            tuplizer for the customer entity\n"
#~ "        --&gt;\n"
#~ "        &lt;tuplizer entity-mode=\"dynamic-map\"\n"
#~ "                class=\"CustomMapTuplizerImpl\"/&gt;\n"
#~ "\n"
#~ "        &lt;id name=\"id\" type=\"long\" column=\"ID\"&gt;\n"
#~ "            &lt;generator class=\"sequence\"/&gt;\n"
#~ "        &lt;/id&gt;\n"
#~ "\n"
#~ "        &lt;!-- other properties --&gt;\n"
#~ "        ...\n"
#~ "    &lt;/class&gt;\n"
#~ "&lt;/hibernate-mapping&gt;\n"
#~ "\n"
#~ "\n"
#~ "public class CustomMapTuplizerImpl\n"
#~ "        extends org.hibernate.tuple.entity.DynamicMapEntityTuplizer {\n"
#~ "    // override the buildInstantiator() method to plug in our custom "
#~ "map...\n"
#~ "    protected final Instantiator buildInstantiator(\n"
#~ "            org.hibernate.mapping.PersistentClass mappingInfo) {\n"
#~ "        return new CustomMapInstantiator( mappingInfo );\n"
#~ "    }\n"
#~ "\n"
#~ "    private static final class CustomMapInstantiator\n"
#~ "            extends org.hibernate.tuple.DynamicMapInstantitor {\n"
#~ "        // override the generateMap() method to return our custom map...\n"
#~ "    protected final Map generateMap() {\n"
#~ "    return new CustomMap();\n"
#~ "    }\n"
#~ "    }\n"
#~ "}"
