# translation of persistent_classes.po to
# Michael H. Smith <mhideo@redhat.com>, 2007.
# Angela Garcia <agarcia@redhat.com>, 2009, 2010.
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
msgid ""
msgstr ""
"Project-Id-Version: persistent_classes\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-20 21:02+0000\n"
"PO-Revision-Date: 2010-03-16 11:10+1000\n"
"Last-Translator: Angela Garcia <agarcia@redhat.com>\n"
"Language-Team:  <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: persistent_classes.xml:32
#, no-c-format
msgid "Persistent Classes"
msgstr "Clases persistentes"

#. Tag: para
#: persistent_classes.xml:34
#, fuzzy, no-c-format
msgid ""
"Persistent classes are classes in an application that implement the entities "
"of the business problem (e.g. Customer and Order in an E-commerce "
"application). The term \"persistent\" here means that the classes are able "
"to be persisted, not that they are in the persistent state (see <xref "
"linkend=\"objectstate-overview\"/> for discussion)."
msgstr ""
"Las clases presistentes son clases en una aplicación que implementan las "
"entidades del problema empresarial (por ejemplo, Customer y Order en una "
"aplicación de comercio electrónico). No se considera que todas las "
"instancias de una clase persistente estén en estado persistente. Por "
"ejemplo, una instancia puede ser transitoria o separada."

#. Tag: para
#: persistent_classes.xml:41
#, fuzzy, no-c-format
msgid ""
"Hibernate works best if these classes follow some simple rules, also known "
"as the Plain Old Java Object (POJO) programming model. However, none of "
"these rules are hard requirements. Indeed, Hibernate assumes very little "
"about the nature of your persistent objects. You can express a domain model "
"in other ways (using trees of <interfacename>java.util.Map</interfacename> "
"instances, for example)."
msgstr ""
"Hibernate funciona mejor si estas clases siguen algunas reglas simples, "
"también conocidas como el modelo de programación POJO (Plain Old Java "
"Object). Sin embargo, ninguna de estas reglas son requerimientos rígidos. De "
"hecho, Hibernate3 asume muy poco acerca de la naturaleza de sus objetos "
"persistentes. Puede expresar un modelo de dominio en otras formas (por "
"ejemplo, utilizando árboles de instancias de <literal>Map</literal>)."

#. Tag: title
#: persistent_classes.xml:49
#, no-c-format
msgid "A simple POJO example"
msgstr "Ejemplo simple de POJO"

#. Tag: title
#: persistent_classes.xml:52
#, no-c-format
msgid "Simple POJO representing a cat"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:53
#, no-c-format
msgid ""
"package eg;\n"
"import java.util.Set;\n"
"import java.util.Date;\n"
"\n"
"public class Cat {\n"
"private Long id; // identifier\n"
"\n"
"private Date birthdate;\n"
"private Color color;\n"
"private char sex;\n"
"private float weight;\n"
"    private int litterId;\n"
"\n"
"    private Cat mother;\n"
"    private Set kittens = new HashSet();\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id=id;\n"
"    }\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    void setBirthdate(Date date) {\n"
"        birthdate = date;\n"
"    }\n"
"    public Date getBirthdate() {\n"
"        return birthdate;\n"
"    }\n"
"\n"
"    void setWeight(float weight) {\n"
"        this.weight = weight;\n"
"    }\n"
"    public float getWeight() {\n"
"        return weight;\n"
"    }\n"
"\n"
"    public Color getColor() {\n"
"        return color;\n"
"    }\n"
"    void setColor(Color color) {\n"
"        this.color = color;\n"
"    }\n"
"\n"
"    void setSex(char sex) {\n"
"        this.sex=sex;\n"
"    }\n"
"    public char getSex() {\n"
"        return sex;\n"
"    }\n"
"\n"
"    void setLitterId(int id) {\n"
"        this.litterId = id;\n"
"    }\n"
"    public int getLitterId() {\n"
"        return litterId;\n"
"    }\n"
"\n"
"    void setMother(Cat mother) {\n"
"        this.mother = mother;\n"
"    }\n"
"    public Cat getMother() {\n"
"        return mother;\n"
"    }\n"
"    void setKittens(Set kittens) {\n"
"        this.kittens = kittens;\n"
"    }\n"
"    public Set getKittens() {\n"
"        return kittens;\n"
"    }\n"
"\n"
"    // addKitten not needed by Hibernate\n"
"    public void addKitten(Cat kitten) {\n"
"        kitten.setMother(this);\n"
"    kitten.setLitterId( kittens.size() );\n"
"        kittens.add(kitten);\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: persistent_classes.xml:57
#, no-c-format
msgid ""
"The four main rules of persistent classes are explored in more detail in the "
"following sections."
msgstr ""
"En las siguientes secciones vamos a explorar en mayor detalle las cuatro "
"reglas principales de las clases persistentes. "

#. Tag: title
#: persistent_classes.xml:62
#, no-c-format
msgid "Implement a no-argument constructor"
msgstr "Implemente un constructor sin argumentos"

#. Tag: para
#: persistent_classes.xml:64
#, fuzzy, no-c-format
msgid ""
"<classname>Cat</classname> has a no-argument constructor. All persistent "
"classes must have a default constructor (which can be non-public) so that "
"Hibernate can instantiate them using <literal><classname>java.lang.reflect."
"Constructor</classname>.newInstance()</literal>. It is recommended that this "
"constructor be defined with at least <emphasis>package</emphasis> visibility "
"in order for runtime proxy generation to work properly."
msgstr ""
"<literal>Cat</literal> tiene un contructor sin argumentos. Todas las clases "
"persistentes deben tener un constructor predeterminado (el cual puede ser no-"
"público) de modo que Hibernate pueda instanciarlas usando "
"<literal>Constructor.newInstance()</literal>. Le recomendamos contar con un "
"constructor por defecto con al menos una visibilidad de <emphasis>paquete</"
"emphasis> para la generación de proxies en tiempo de ejecución en Hibernate."

#. Tag: title
#: persistent_classes.xml:74
#, fuzzy, no-c-format
msgid "Provide an identifier property"
msgstr "Proporcione una propiedad identificadora (opcional)"

#. Tag: para
#: persistent_classes.xml:77
#, no-c-format
msgid ""
"Historically this was considered option. While still not (yet) enforced, "
"this should be considered a deprecated feature as it will be completely "
"required to provide a identifier property in an upcoming release."
msgstr ""

#. Tag: para
#: persistent_classes.xml:84
#, no-c-format
msgid ""
"<classname>Cat</classname> has a property named <literal>id</literal>. This "
"property maps to the primary key column(s) of the underlying database table. "
"The type of the identifier property can be any \"basic\" type (see <xref "
"linkend=\"types.value.basic\"/>). See <xref linkend=\"components-compositeid"
"\"/> for information on mapping composite (multi-column) identifiers."
msgstr ""

#. Tag: para
#: persistent_classes.xml:92
#, no-c-format
msgid ""
"Identifiers do not necessarily need to identify column(s) in the database "
"physically defined as a primary key. They should just identify columns that "
"can be used to uniquely identify rows in the underlying table."
msgstr ""

#. Tag: para
#: persistent_classes.xml:99
#, no-c-format
msgid ""
"We recommend that you declare consistently-named identifier properties on "
"persistent classes and that you use a nullable (i.e., non-primitive) type."
msgstr ""
"Le recomendamos que declare propiedades identificadoras nombradas-"
"consistentemente en clases persistentes. y que utilice un tipo nulable (por "
"ejemplo, no primitivo)."

#. Tag: title
#: persistent_classes.xml:107
#, fuzzy, no-c-format
msgid "Prefer non-final classes (semi-optional)"
msgstr "Prefiera las clases no finales (opcional)"

#. Tag: para
#: persistent_classes.xml:109
#, no-c-format
msgid ""
"A central feature of Hibernate, <emphasis>proxies</emphasis> (lazy loading), "
"depends upon the persistent class being either non-final, or the "
"implementation of an interface that declares all public methods. You can "
"persist <literal>final</literal> classes that do not implement an interface "
"with Hibernate; you will not, however, be able to use proxies for lazy "
"association fetching which will ultimately limit your options for "
"performance tuning. To persist a <literal>final</literal> class which does "
"not implement a \"full\" interface you must disable proxy generation. See "
"<xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-xml\"/"
"> and <xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-"
"ann\"/>."
msgstr ""

#. Tag: title
#: persistent_classes.xml:121
#, no-c-format
msgid "Disabling proxies in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:122
#, no-c-format
msgid "<![CDATA[<class name=\"Cat\" lazy=\"false\"...>...</class>]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:126
#, no-c-format
msgid "Disabling proxies in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:127
#, no-c-format
msgid "<![CDATA[@Entity @Proxy(lazy=false) public class Cat { ... }]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:130
#, no-c-format
msgid ""
"If the <literal>final</literal> class does implement a proper interface, you "
"could alternatively tell Hibernate to use the interface instead when "
"generating the proxies. See <xref linkend=\"persistent-classes-pojo-final-"
"example-proxy-interface-xml\"/> and <xref linkend=\"persistent-classes-pojo-"
"final-example-proxy-interface-ann\"/>."
msgstr ""

#. Tag: title
#: persistent_classes.xml:139
#, no-c-format
msgid "Proxying an interface in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:140
#, no-c-format
msgid "<![CDATA[<class name=\"Cat\" proxy=\"ICat\"...>...</class>]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:144
#, no-c-format
msgid "Proxying an interface in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:145
#, no-c-format
msgid ""
"<![CDATA[@Entity @Proxy(proxyClass=ICat.class) public class Cat implements "
"ICat { ... }]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:148
#, fuzzy, no-c-format
msgid ""
"You should also avoid declaring <literal>public final</literal> methods as "
"this will again limit the ability to generate <emphasis>proxies</emphasis> "
"from this class. If you want to use a class with <literal>public final</"
"literal> methods, you must explicitly disable proxying. Again, see <xref "
"linkend=\"persistent-classes-pojo-final-example-disable-proxies-xml\"/> and "
"<xref linkend=\"persistent-classes-pojo-final-example-disable-proxies-ann\"/"
">."
msgstr ""
"También debe evitar el declarar métodos <literal>public final</literal> en "
"las clases no-finales. Si quiere utilizar una clase con un método "
"<literal>public final</literal>, debe deshabilitar explícitamente el uso de "
"proxies estableciendo <literal>lazy=\"false\"</literal>."

#. Tag: title
#: persistent_classes.xml:158
#, no-c-format
msgid "Declare accessors and mutators for persistent fields (optional)"
msgstr ""
"Declare métodos de acceso y de modificación para los campos persistentes "
"(opcional)"

#. Tag: para
#: persistent_classes.xml:160
#, fuzzy, no-c-format
msgid ""
"<classname>Cat</classname> declares accessor methods for all its persistent "
"fields. Many other ORM tools directly persist instance variables. It is "
"better to provide an indirection between the relational schema and internal "
"data structures of the class. By default, Hibernate persists JavaBeans style "
"properties and recognizes method names of the form <literal>getFoo</"
"literal>, <literal>isFoo</literal> and <literal>setFoo</literal>. If "
"required, you can switch to direct field access for particular properties."
msgstr ""
"<literal>Cat</literal> declara métodos de acceso para todos sus campos "
"persistentes. Muchas otras herramientas ORM persisten directamente variables "
"de instancia. Es mejor proporcionar una indirección entre el esquema "
"relacional y las estructuras de datos internos de la clase. Por defecto, "
"Hibernate persiste las propiedades del estilo JavaBeans, y reconoce los "
"nombres de método de la forma <literal>getFoo</literal>, <literal>isFoo</"
"literal> y <literal>setFoo</literal>. De ser necesario, puede cambiarse al "
"acceso directo a campos para propiedades específicas."

#. Tag: para
#: persistent_classes.xml:169
#, fuzzy, no-c-format
msgid ""
"Properties need <emphasis>not</emphasis> be declared public. Hibernate can "
"persist a property declared with <literal>package</literal>, "
"<literal>protected</literal> or <literal>private</literal> visibility as "
"well."
msgstr ""
"<emphasis>No</emphasis> es necesario declarar públicas las propiedades. "
"Hibernate puede persistir una propiedad con un par get / set "
"<literal>protected</literal> o <literal>private</literal>."

#. Tag: title
#: persistent_classes.xml:178
#, no-c-format
msgid "Implementing inheritance"
msgstr "Implementación de herencia"

#. Tag: para
#: persistent_classes.xml:180
#, no-c-format
msgid ""
"A subclass must also observe the first and second rules. It inherits its "
"identifier property from the superclass, <literal>Cat</literal>. For example:"
msgstr ""
"Una subclase también tiene que cumplir con la primera y la segunda regla. "
"Hereda su propiedad identificadora de la superclase <literal>Cat</literal>. "
"Por ejemplo:"

#. Tag: programlisting
#: persistent_classes.xml:184
#, no-c-format
msgid ""
"package eg;\n"
"\n"
"public class DomesticCat extends Cat {\n"
"        private String name;\n"
"\n"
"        public String getName() {\n"
"                return name;\n"
"        }\n"
"        protected void setName(String name) {\n"
"                this.name=name;\n"
"        }\n"
"}"
msgstr ""

#. Tag: title
#: persistent_classes.xml:188
#, no-c-format
msgid ""
"Implementing <literal>equals()</literal> and <literal>hashCode()</literal>"
msgstr ""
"Implementando <literal>equals()</literal> y <literal>hashCode()</literal>"

#. Tag: para
#: persistent_classes.xml:191
#, no-c-format
msgid ""
"You have to override the <literal>equals()</literal> and <literal>hashCode()"
"</literal> methods if you:"
msgstr ""
"Tiene que sobrescribir los métodos <literal>equals()</literal> y "
"<literal>hashCode()</literal> si:"

#. Tag: para
#: persistent_classes.xml:196
#, no-c-format
msgid ""
"intend to put instances of persistent classes in a <literal>Set</literal> "
"(the recommended way to represent many-valued associations); <emphasis>and</"
"emphasis>"
msgstr ""
"piensa poner instancias de clases persistentes en un <literal>Set</literal> "
"(la forma recomendada de representar asociaciones multivaluadas); "
"<emphasis>y</emphasis>"

#. Tag: para
#: persistent_classes.xml:202
#, no-c-format
msgid "intend to use reattachment of detached instances"
msgstr "piensa utilizar reasociación de instancias separadas."

#. Tag: para
#: persistent_classes.xml:206
#, no-c-format
msgid ""
"Hibernate guarantees equivalence of persistent identity (database row) and "
"Java identity only inside a particular session scope. When you mix instances "
"retrieved in different sessions, you must implement <literal>equals()</"
"literal> and <literal>hashCode()</literal> if you wish to have meaningful "
"semantics for <literal>Set</literal>s."
msgstr ""
"Hibernate garantiza la equivalencia de identidad persistente (fila de base "
"de datos) y de identidad Java sólamente dentro del ámbito de una sesión en "
"particular. De modo que en el momento en que mezcla instancias recuperadas "
"en sesiones diferentes, tiene que implementar <literal>equals()</literal> y "
"<literal>hashCode()</literal> si desea tener una semántica significativa "
"para <literal>Set</literal>s."

#. Tag: para
#: persistent_classes.xml:212
#, no-c-format
msgid ""
"The most obvious way is to implement <literal>equals()</literal>/"
"<literal>hashCode()</literal> by comparing the identifier value of both "
"objects. If the value is the same, both must be the same database row, "
"because they are equal. If both are added to a <literal>Set</literal>, you "
"will only have one element in the <literal>Set</literal>). Unfortunately, "
"you cannot use that approach with generated identifiers. Hibernate will only "
"assign identifier values to objects that are persistent; a newly created "
"instance will not have any identifier value. Furthermore, if an instance is "
"unsaved and currently in a <literal>Set</literal>, saving it will assign an "
"identifier value to the object. If <literal>equals()</literal> and "
"<literal>hashCode()</literal> are based on the identifier value, the hash "
"code would change, breaking the contract of the <literal>Set</literal>. See "
"the Hibernate website for a full discussion of this problem. This is not a "
"Hibernate issue, but normal Java semantics of object identity and equality."
msgstr ""
"La forma más obvia es implementar <literal>equals()</literal>/"
"<literal>hashCode()</literal> comparando el valor identificador de ambos "
"objetos. Si el valor es el mismo, ambos deben ser la misma fila de la base "
"de datos ya que son iguales. Si ambos son agregados a un <literal>Set</"
"literal>, sólo tendremos un elemento en el <literal>Set</literal>). "
"Desafortunadamente, no puede utilizar este enfoque con identificadores "
"generados. Hibernate sólo asignará valores identificadores a objetos que son "
"persistentes; una instancia recién creada no tendrá ningún valor "
"identificador. Además, si una instancia no se encuentra guardada y está "
"actualmente en un <literal>Set</literal>, al guardarla se asignará un valor "
"identificador al objeto. Si <literal>equals()</literal> y <literal>hashCode()"
"</literal> están basados en el valor identificador, el código hash podría "
"cambiar, rompiendo el contrato del <literal>Set</literal>. Consulte el sitio "
"web de Hibernate y allí encontrará una discusión completa sobre este "
"problema. Este no es un problema de Hibernate, sino de la semántica normal "
"de Java de identidad de objeto e igualdad."

#. Tag: para
#: persistent_classes.xml:228
#, no-c-format
msgid ""
"It is recommended that you implement <literal>equals()</literal> and "
"<literal>hashCode()</literal> using <emphasis>Business key equality</"
"emphasis>. Business key equality means that the <literal>equals()</literal> "
"method compares only the properties that form the business key. It is a key "
"that would identify our instance in the real world (a <emphasis>natural</"
"emphasis> candidate key):"
msgstr ""
"Le recomendamos implementar <literal>equals()</literal> y <literal>hashCode()"
"</literal> utilizando <emphasis>igualdad de clave empresarial (Business key "
"equality)</emphasis>. Igualdad de clave empresarial significa que el método "
"<literal>equals()</literal> sólamente compara las propiedades que forman la "
"clave empresarial. Esta es una clave que podría identificar nuestra "
"instancia en el mundo real (una clave candidata <emphasis>natural</"
"emphasis>):"

#. Tag: programlisting
#: persistent_classes.xml:235
#, no-c-format
msgid ""
"public class Cat {\n"
"\n"
"    ...\n"
"    public boolean equals(Object other) {\n"
"        if (this == other) return true;\n"
"        if ( !(other instanceof Cat) ) return false;\n"
"\n"
"        final Cat cat = (Cat) other;\n"
"\n"
"        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
"        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
"\n"
"        return true;\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        int result;\n"
"        result = getMother().hashCode();\n"
"        result = 29 * result + getLitterId();\n"
"        return result;\n"
"    }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#: persistent_classes.xml:237
#, fuzzy, no-c-format
msgid ""
"A business key does not have to be as solid as a database primary key "
"candidate (see <xref linkend=\"transactions-basics-identity\"/>). Immutable "
"or unique properties are usually good candidates for a business key."
msgstr ""
"Una clave empresarial no tiene que ser tan sólida como una clave principal "
"candidata (consulte la <xref linkend=\"transactions-basics-identity\" />). "
"Las propiedades inmutables o únicas usualmente son buenas candidatas para "
"una clave empresarial."

#. Tag: title
#: persistent_classes.xml:244
#, no-c-format
msgid "Dynamic models"
msgstr "Modelos dinámicos"

#. Tag: title
#: persistent_classes.xml:247
#, no-c-format
msgid "Note"
msgstr "Nota"

#. Tag: emphasis
#: persistent_classes.xml:249
#, fuzzy, no-c-format
msgid ""
"The following features are currently considered experimental and may change "
"in the near future."
msgstr ""
"<emphasis>Las siguientes funcionalidades se consideran como experimentales "
"actualmente y es posible que cambien pronto.</emphasis>"

#. Tag: para
#: persistent_classes.xml:253
#, no-c-format
msgid ""
"Persistent entities do not necessarily have to be represented as POJO "
"classes or as JavaBean objects at runtime. Hibernate also supports dynamic "
"models (using <literal>Map</literal>s of <literal>Map</literal>s at runtime) "
"and the representation of entities as DOM4J trees. With this approach, you "
"do not write persistent classes, only mapping files."
msgstr ""
"Las entidades persistentes no necesariamente tienen que estar representadas "
"como clases POJO o como objetos JavaBean en tiempo de ejecución. Hibernate "
"también soporta modelos dinámicos (utilizando <literal>Map</literal>eos de "
"<literal>Map</literal>eos en tiempo de ejecución) y la representación de "
"entidades como árboles de DOM4J. No escriba clases persistentes con este "
"enfoque, sólamente archivos de mapeo. "

#. Tag: para
#: persistent_classes.xml:259
#, fuzzy, no-c-format
msgid ""
"By default, Hibernate works in normal POJO mode. You can set a default "
"entity representation mode for a particular <literal>SessionFactory</"
"literal> using the <literal>default_entity_mode</literal> configuration "
"option (see <xref linkend=\"configuration-optional-properties\"/>)."
msgstr ""
"Por defecto, Hibernate funciona en modo POJO normal. Puede establecer un "
"modo de representación de entidad predeterminado para una "
"<literal>SessionFactory</literal> en particular utilizando la opción de "
"configuración <literal>default_entity_mode</literal> (consulte <xref linkend="
"\"configuration-optional-properties\" />)."

#. Tag: para
#: persistent_classes.xml:265
#, no-c-format
msgid ""
"The following examples demonstrate the representation using <literal>Map</"
"literal>s. First, in the mapping file an <literal>entity-name</literal> has "
"to be declared instead of, or in addition to, a class name:"
msgstr ""
"Los siguientes ejemplos demuestran la representación utilizando "
"<literal>Map</literal>eos. Primero, en el archivo de mapeo tiene que "
"declararse un <literal>entity-name</literal> en lugar de, o además de un "
"nombre de clase:"

#. Tag: programlisting
#: persistent_classes.xml:270
#, no-c-format
msgid ""
"&lt;hibernate-mapping&gt;\n"
"\n"
"    &lt;class entity-name=\"Customer\"&gt;\n"
"\n"
"        &lt;id name=\"id\"\n"
"            type=\"long\"\n"
"            column=\"ID\"&gt;\n"
"            &lt;generator class=\"sequence\"/&gt;\n"
"        &lt;/id&gt;\n"
"\n"
"        &lt;property name=\"name\"\n"
"            column=\"NAME\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;property name=\"address\"\n"
"            column=\"ADDRESS\"\n"
"            type=\"string\"/&gt;\n"
"\n"
"        &lt;many-to-one name=\"organization\"\n"
"            column=\"ORGANIZATION_ID\"\n"
"            class=\"Organization\"/&gt;\n"
"\n"
"        &lt;bag name=\"orders\"\n"
"            inverse=\"true\"\n"
"            lazy=\"false\"\n"
"            cascade=\"all\"&gt;\n"
"            &lt;key column=\"CUSTOMER_ID\"/&gt;\n"
"            &lt;one-to-many class=\"Order\"/&gt;\n"
"        &lt;/bag&gt;\n"
"\n"
"    &lt;/class&gt;\n"
"    \n"
"&lt;/hibernate-mapping&gt;"
msgstr ""

#. Tag: para
#: persistent_classes.xml:272
#, no-c-format
msgid ""
"Even though associations are declared using target class names, the target "
"type of associations can also be a dynamic entity instead of a POJO."
msgstr ""
"Aunque las asociaciones se declaran utilizando nombres de clase destino, el "
"tipo destino de una asociación puede ser además una entidad dinámica en "
"lugar de un POJO."

#. Tag: para
#: persistent_classes.xml:276
#, no-c-format
msgid ""
"After setting the default entity mode to <literal>dynamic-map</literal> for "
"the <literal>SessionFactory</literal>, you can, at runtime, work with "
"<literal>Map</literal>s of <literal>Map</literal>s:"
msgstr ""
"Después de establecer el modo de entidad predeterminado como "
"<literal>dynamic-map</literal> para la <literal>SessionFactory</literal>, "
"puede trabajar en tiempo de ejecución con <literal>Map</literal>eos de "
"<literal>Map</literal>eos: "

#. Tag: programlisting
#: persistent_classes.xml:281
#, no-c-format
msgid ""
"Session s = openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"\n"
"// Create an organization\n"
"Map foobar = new HashMap();\n"
"foobar.put(\"name\", \"Foobar Inc.\");\n"
"\n"
"// Link both\n"
"david.put(\"organization\", foobar);\n"
"\n"
"// Save both\n"
"s.save(\"Customer\", david);\n"
"s.save(\"Organization\", foobar);\n"
"\n"
"tx.commit();\n"
"s.close();"
msgstr ""

#. Tag: para
#: persistent_classes.xml:283
#, no-c-format
msgid ""
"One of the main advantages of dynamic mapping is quick turnaround time for "
"prototyping, without the need for entity class implementation. However, you "
"lose compile-time type checking and will likely deal with many exceptions at "
"runtime. As a result of the Hibernate mapping, the database schema can "
"easily be normalized and sound, allowing to add a proper domain model "
"implementation on top later on."
msgstr ""
"Una de las ventajas principales de un mapeo dinámico es el rápido tiempo de "
"entrega del prototipado sin la necesidad de implementar clases de entidad. "
"Sin embargo, pierde el chequeo de tipos en tiempo de compilación y muy "
"probablemente tendrá que tratar con muchas excepciones en tiempo de "
"ejecución. Gracias al mapeo de Hibernate, el esquema de base de datos se "
"puede normalizar y volver sólido, permitiendo añadir una implementación "
"apropiada del modelo de dominio más adelante."

#. Tag: para
#: persistent_classes.xml:290
#, no-c-format
msgid ""
"Entity representation modes can also be set on a per <literal>Session</"
"literal> basis:"
msgstr ""
"Los modos de representación de entidad se pueden establecer por "
"<literal>Session</literal>:"

#. Tag: programlisting
#: persistent_classes.xml:293
#, no-c-format
msgid ""
"Session dynamicSession = pojoSession.getSession(EntityMode.MAP);\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"dynamicSession.save(\"Customer\", david);\n"
"...\n"
"dynamicSession.flush();\n"
"dynamicSession.close()\n"
"...\n"
"// Continue on pojoSession"
msgstr ""

#. Tag: para
#: persistent_classes.xml:295
#, no-c-format
msgid ""
"Please note that the call to <literal>getSession()</literal> using an "
"<literal>EntityMode</literal> is on the <literal>Session</literal> API, not "
"the <literal>SessionFactory</literal>. That way, the new <literal>Session</"
"literal> shares the underlying JDBC connection, transaction, and other "
"context information. This means you do not have to call <literal>flush()</"
"literal> and <literal>close()</literal> on the secondary <literal>Session</"
"literal>, and also leave the transaction and connection handling to the "
"primary unit of work."
msgstr ""
"Tenga en cuenta que la llamada a <literal>getSession()</literal> utilizando "
"un <literal>EntityMode</literal> está en la API de <literal>Session</"
"literal>, no en la de <literal>SessionFactory</literal>. De esta forma, la "
"nueva <literal>Session</literal> comparte la conexión JDBC, la transacción y "
"otra información de contexto. Esto significa que no tiene que llamar a "
"<literal>flush()</literal> ni a <literal>close()</literal> en la "
"<literal>Session</literal> secundaria, y también tiene que dejar el manejo "
"de la transacción y de la conexión a la unidad de trabajo primaria. "

#. Tag: para
#: persistent_classes.xml:304
#, fuzzy, no-c-format
msgid ""
"More information about the XML representation capabilities can be found in "
"<xref linkend=\"xml\"/>."
msgstr ""
"Puede encontrar más información sobre las capacidades de representación de "
"XML en <xref linkend=\"xml\" />."

#. Tag: title
#: persistent_classes.xml:310
#, no-c-format
msgid "Tuplizers"
msgstr "Tuplizers"

#. Tag: para
#: persistent_classes.xml:312
#, fuzzy, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.Tuplizer</interfacename> and its sub-"
"interfaces are responsible for managing a particular representation of a "
"piece of data given that representation's <classname>org.hibernate."
"EntityMode</classname>. If a given piece of data is thought of as a data "
"structure, then a tuplizer is the thing that knows how to create such a data "
"structure, how to extract values from such a data structure and how to "
"inject values into such a data structure. For example, for the POJO entity "
"mode, the corresponding tuplizer knows how create the POJO through its "
"constructor. It also knows how to access the POJO properties using the "
"defined property accessors."
msgstr ""
"<literal>org.hibernate.tuple.Tuplizer</literal> y sus subinterfaces son las "
"responsables de administrar una representación en particular de un dato, "
"dadas las representaciones de <literal>org.hibernate.EntityMode</literal>. "
"Si un dato dado se considera como una estructura de datos entonces un "
"tuplizer es la cosa que sabe como crear tal estructura de datos y sabe como "
"extraer e insertar valores en dicha estructura de datos. Por ejemplo, para "
"el modo de entidad POJO, el tuplizer correspondiente sabe como crear el POJO "
"por medio de su constructor. También sabe como acceder a las propiedades "
"POJO utilizando los accesores de propiedad definidos. "

#. Tag: para
#: persistent_classes.xml:322
#, no-c-format
msgid "There are two (high-level) types of Tuplizers:"
msgstr ""

#. Tag: para
#: persistent_classes.xml:326
#, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.entity.EntityTuplizer</interfacename> "
"which is responsible for managing the above mentioned contracts in regards "
"to entities"
msgstr ""

#. Tag: para
#: persistent_classes.xml:332
#, no-c-format
msgid ""
"<interfacename>org.hibernate.tuple.component.ComponentTuplizer</"
"interfacename> which does the same for components"
msgstr ""

#. Tag: para
#: persistent_classes.xml:340
#, fuzzy, no-c-format
msgid ""
"Users can also plug in their own tuplizers. Perhaps you require that "
"<interfacename>java.util.Map</interfacename> implementation other than "
"<classname>java.util.HashMap</classname> be used while in the dynamic-map "
"entity-mode. Or perhaps you need to define a different proxy generation "
"strategy than the one used by default. Both would be achieved by defining a "
"custom tuplizer implementation. Tuplizer definitions are attached to the "
"entity or component mapping they are meant to manage. Going back to the "
"example of our <classname>Customer</classname> entity, <xref linkend="
"\"example-specify-custom-tuplizer-ann\"/> shows how to specify a custom "
"<interfacename>org.hibernate.tuple.entity.EntityTuplizer</interfacename> "
"using annotations while <xref linkend=\"example-specify-custom-tuplizer-xml"
"\"/> shows how to do the same in <literal>hbm.xml</literal>"
msgstr ""
"Los usuarios también pueden enchufar sus propios tuplizers. Tal vez necesite "
"que una implementación <literal>java.util.Map</literal> diferente de "
"<literal>java.util.HashMap</literal> se utilice en el modo de entidad de "
"mapeo dinámico. O quizás necesite definir una estrategia de generación proxy "
"diferente de la que se utiliza por defecto. Se pueden obtener ambas al "
"definir una implementación tuplizer personalizada. Las definiciones de los "
"tuplizers se encuentran sujetas a la entidad o componente de mapeo que se "
"supone que tienen que administrar. Regresando al ejemplo de nuestra entidad "
"de cliente:"

#. Tag: title
#: persistent_classes.xml:353
#, no-c-format
msgid "Specify custom tuplizers in annotations"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:354
#, no-c-format
msgid ""
"@Entity\n"
"@Tuplizer(impl = DynamicEntityTuplizer.class)\n"
"public interface Cuisine {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long getId();\n"
"    public void setId(Long id);\n"
"\n"
"    public String getName();\n"
"    public void setName(String name);\n"
"\n"
"    @Tuplizer(impl = DynamicComponentTuplizer.class)\n"
"    public Country getCountry();\n"
"    public void setCountry(Country country);\n"
"}"
msgstr ""

#. Tag: title
#: persistent_classes.xml:357
#, no-c-format
msgid "Specify custom tuplizers in <literal>hbm.xml</literal>"
msgstr ""

#. Tag: programlisting
#: persistent_classes.xml:358
#, no-c-format
msgid ""
"&lt;hibernate-mapping&gt;\n"
"    &lt;class entity-name=\"Customer\"&gt;\n"
"        &lt;!--\n"
"            Override the dynamic-map entity-mode\n"
"            tuplizer for the customer entity\n"
"        --&gt;\n"
"        &lt;tuplizer entity-mode=\"dynamic-map\"\n"
"                class=\"CustomMapTuplizerImpl\"/&gt;\n"
"\n"
"        &lt;id name=\"id\" type=\"long\" column=\"ID\"&gt;\n"
"            &lt;generator class=\"sequence\"/&gt;\n"
"        &lt;/id&gt;\n"
"\n"
"        &lt;!-- other properties --&gt;\n"
"        ...\n"
"    &lt;/class&gt;\n"
"&lt;/hibernate-mapping&gt;"
msgstr ""

#. Tag: title
#: persistent_classes.xml:363
#, no-c-format
msgid "EntityNameResolvers"
msgstr "EntityNameResolvers"

#. Tag: para
#: persistent_classes.xml:365
#, fuzzy, no-c-format
msgid ""
"<interfacename>org.hibernate.EntityNameResolver</interfacename> is a "
"contract for resolving the entity name of a given entity instance. The "
"interface defines a single method <methodname>resolveEntityName</methodname> "
"which is passed the entity instance and is expected to return the "
"appropriate entity name (null is allowed and would indicate that the "
"resolver does not know how to resolve the entity name of the given entity "
"instance). Generally speaking, an <interfacename>org.hibernate."
"EntityNameResolver</interfacename> is going to be most useful in the case of "
"dynamic models. One example might be using proxied interfaces as your domain "
"model. The hibernate test suite has an example of this exact style of usage "
"under the <package>org.hibernate.test.dynamicentity.tuplizer2</package>. "
"Here is some of the code from that package for illustration."
msgstr ""
"La interfaz <interfacename>org.hibernate.EntityNameResolver</interfacename> "
"es un contrato para resolver el nombre de la entidad de una instancia de "
"entidad dada. La interfaz define un solo método "
"<methodname>resolveEntityName</methodname>, el cual se le pasa la instancia "
"entidad y se espera que retorne el nombre de entidad apropriado (se permite "
"nulo e indicaría que el resolvedor no sabe cómo resolver el nombre de la "
"entidad de la instancia de entidad dada). Generalmente hablando, un "
"<interfacename>org.hibernate.EntityNameResolver</interfacename> será más "
"útil en el caso de modelos dinámicos. Un ejemplo puede ser el usar "
"interfaces con proxis como su modelo de dominio. La suite de prueba de "
"hibernate tiene un ejemplo de este estilo exacto de uso bajo el <package>org."
"hibernate.test.dynamicentity.tuplizer2</package>. Aquí está algo del código "
"de ese paquete para su ilustración."

#. Tag: programlisting
#: persistent_classes.xml:377
#, no-c-format
msgid ""
"/**\n"
" * A very trivial JDK Proxy InvocationHandler implementation where we proxy "
"an\n"
" * interface as the domain model and simply store persistent state in an "
"internal\n"
" * Map.  This is an extremely trivial example meant only for illustration.\n"
" */\n"
"public final class DataProxyHandler implements InvocationHandler {\n"
"        private String entityName;\n"
"        private HashMap data = new HashMap();\n"
"\n"
"        public DataProxyHandler(String entityName, Serializable id) {\n"
"                this.entityName = entityName;\n"
"                data.put( \"Id\", id );\n"
"        }\n"
"\n"
"        public Object invoke(Object proxy, Method method, Object[] args) "
"throws Throwable {\n"
"                String methodName = method.getName();\n"
"                if ( methodName.startsWith( \"set\" ) ) {\n"
"                        String propertyName = methodName.substring( 3 );\n"
"                        data.put( propertyName, args[0] );\n"
"                }\n"
"                else if ( methodName.startsWith( \"get\" ) ) {\n"
"                        String propertyName = methodName.substring( 3 );\n"
"                        return data.get( propertyName );\n"
"                }\n"
"                else if ( \"toString\".equals( methodName ) ) {\n"
"                        return entityName + \"#\" + data.get( \"Id\" );\n"
"                }\n"
"                else if ( \"hashCode\".equals( methodName ) ) {\n"
"                        return new Integer( this.hashCode() );\n"
"                }\n"
"                return null;\n"
"        }\n"
"\n"
"        public String getEntityName() {\n"
"                return entityName;\n"
"        }\n"
"\n"
"        public HashMap getData() {\n"
"                return data;\n"
"        }\n"
"}\n"
"\n"
"public class ProxyHelper {\n"
"    public static String extractEntityName(Object object) {\n"
"        // Our custom java.lang.reflect.Proxy instances actually bundle\n"
"        // their appropriate entity name, so we simply extract it from "
"there\n"
"        // if this represents one of our proxies; otherwise, we return null\n"
"        if ( Proxy.isProxyClass( object.getClass() ) ) {\n"
"            InvocationHandler handler = Proxy.getInvocationHandler"
"( object );\n"
"            if ( DataProxyHandler.class.isAssignableFrom( handler.getClass"
"() ) ) {\n"
"                DataProxyHandler myHandler = ( DataProxyHandler ) handler;\n"
"                return myHandler.getEntityName();\n"
"            }\n"
"        }\n"
"        return null;\n"
"    }\n"
"\n"
"    // various other utility methods ....\n"
"\n"
"}\n"
"\n"
"/**\n"
" * The EntityNameResolver implementation.\n"
" *\n"
" * IMPL NOTE : An EntityNameResolver really defines a strategy for how "
"entity names\n"
" * should be resolved.  Since this particular impl can handle resolution for "
"all of our\n"
" * entities we want to take advantage of the fact that SessionFactoryImpl "
"keeps these\n"
" * in a Set so that we only ever have one instance registered.  Why?  Well, "
"when it\n"
" * comes time to resolve an entity name, Hibernate must iterate over all the "
"registered\n"
" * resolvers.  So keeping that number down helps that process be as speedy "
"as possible.\n"
" * Hence the equals and hashCode implementations as is\n"
" */\n"
"public class MyEntityNameResolver implements EntityNameResolver {\n"
"    public static final MyEntityNameResolver INSTANCE = new "
"MyEntityNameResolver();\n"
"\n"
"    public String resolveEntityName(Object entity) {\n"
"        return ProxyHelper.extractEntityName( entity );\n"
"    }\n"
"\n"
"    public boolean equals(Object obj) {\n"
"        return getClass().equals( obj.getClass() );\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        return getClass().hashCode();\n"
"    }\n"
"}\n"
"\n"
"public class MyEntityTuplizer extends PojoEntityTuplizer {\n"
"        public MyEntityTuplizer(EntityMetamodel entityMetamodel, "
"PersistentClass mappedEntity) {\n"
"                super( entityMetamodel, mappedEntity );\n"
"        }\n"
"\n"
"        public EntityNameResolver[] getEntityNameResolvers() {\n"
"                return new EntityNameResolver[] { MyEntityNameResolver."
"INSTANCE };\n"
"        }\n"
"\n"
"    public String determineConcreteSubclassEntityName(Object entityInstance, "
"SessionFactoryImplementor factory) {\n"
"        String entityName = ProxyHelper.extractEntityName"
"( entityInstance );\n"
"        if ( entityName == null ) {\n"
"            entityName = super.determineConcreteSubclassEntityName"
"( entityInstance, factory );\n"
"        }\n"
"        return entityName;\n"
"    }\n"
"\n"
"    ..."
msgstr ""

#. Tag: para
#: persistent_classes.xml:379
#, no-c-format
msgid ""
"In order to register an <interfacename>org.hibernate.EntityNameResolver</"
"interfacename> users must either:"
msgstr ""
"Con el fin de registrar un <interfacename>org.hibernate.EntityNameResolver</"
"interfacename> los usuarios deben:"

#. Tag: para
#: persistent_classes.xml:383
#, fuzzy, no-c-format
msgid ""
"Implement a custom tuplizer (see <xref linkend=\"persistent-classes-tuplizers"
"\"/>), implementing the <methodname>getEntityNameResolvers</methodname> "
"method"
msgstr ""
"Implementar un <link linkend=\"persistent-classes-tuplizers\">Tuplizer</"
"link> personalizado, implementando el método "
"<methodname>getEntityNameResolvers</methodname>."

#. Tag: para
#: persistent_classes.xml:389
#, no-c-format
msgid ""
"Register it with the <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (which is the implementation class for <interfacename>org."
"hibernate.SessionFactory</interfacename>) using the "
"<methodname>registerEntityNameResolver</methodname> method."
msgstr ""
"Registrarlo con el <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (el cual es la clase de implementación para <interfacename>org."
"hibernate.SessionFactory</interfacename>) usando el método "
"<methodname>registerEntityNameResolver</methodname>."

#~ msgid ""
#~ "Most Java applications require a persistent class representing felines. "
#~ "For example:"
#~ msgstr ""
#~ "La mayoría de aplicaciones Java requieren una clase persistente que "
#~ "represente a los felinos. Por ejemplo:"

#~ msgid ""
#~ "<literal>Cat</literal> has a property called <literal>id</literal>. This "
#~ "property maps to the primary key column of a database table. The property "
#~ "might have been called anything, and its type might have been any "
#~ "primitive type, any primitive \"wrapper\" type, <literal>java.lang."
#~ "String</literal> or <literal>java.util.Date</literal>. If your legacy "
#~ "database table has composite keys, you can use a user-defined class with "
#~ "properties of these types (see the section on composite identifiers later "
#~ "in the chapter.)"
#~ msgstr ""
#~ "<literal>Cat</literal> tiene una propiedad llamada <literal>id</literal>. "
#~ "Esta propiedad mapea a la columna de la llave principal de la tabla de la "
#~ "base de datos. La propiedad podría llamarse de cualquier manera y su tipo "
#~ "podría haber sido cualquier tipo primitivo, cualquier tipo de \"wrapper\" "
#~ "primitivo, <literal>java.lang.String</literal> o <literal>java.util.Date</"
#~ "literal>. Si su tabla de base de datos heredada tiene claves compuestas, "
#~ "puede utilizar una clase definida por el usuario con propiedades de estos "
#~ "tipos (vea la sección sobre identificadores compuestos más adelante en "
#~ "este capítulo)."

#~ msgid ""
#~ "The identifier property is strictly optional. You can leave them off and "
#~ "let Hibernate keep track of object identifiers internally. We do not "
#~ "recommend this, however."
#~ msgstr ""
#~ "La propiedad identificadora es estrictamente opcional. Puede olvidarla y "
#~ "dejar que Hibernate siga internamente la pista de los identificadores del "
#~ "objeto. Sin embargo, no recomendamos que esto suceda."

#~ msgid ""
#~ "In fact, some functionality is available only to classes that declare an "
#~ "identifier property:"
#~ msgstr ""
#~ "De hecho, algunas funcionalidades se encuentran disponibles sólamente "
#~ "para clases que declaran una propiedad identificadora: "

#~ msgid ""
#~ "Transitive reattachment for detached objects (cascade update or cascade "
#~ "merge) - see <xref linkend=\"objectstate-transitive\" />"
#~ msgstr ""
#~ "Reasociación transitiva de objetos separados (actualizaciones o fusiones "
#~ "en cascada) - consulte <xref linkend=\"objectstate-transitive\" />"

#~ msgid "<literal>Session.saveOrUpdate()</literal>"
#~ msgstr "<literal>Session.saveOrUpdate()</literal>"

#~ msgid "<literal>Session.merge()</literal>"
#~ msgstr "<literal>Session.merge()</literal>"

#~ msgid ""
#~ "A central feature of Hibernate, <emphasis>proxies</emphasis>, depends "
#~ "upon the persistent class being either non-final, or the implementation "
#~ "of an interface that declares all public methods."
#~ msgstr ""
#~ "Un aspecto central de Hibernate, los <emphasis>proxies</emphasis>, "
#~ "dependen de que las clases persistentes sean no finales o de la "
#~ "implementación de una interfaz que declare todos los métodos públicos."

#~ msgid ""
#~ "You can persist <literal>final</literal> classes that do not implement an "
#~ "interface with Hibernate. You will not, however, be able to use proxies "
#~ "for lazy association fetching which will ultimately limit your options "
#~ "for performance tuning."
#~ msgstr ""
#~ "Con Hibernate puede persistir las clases <literal>final</literal>es que "
#~ "no implementen una interfaz. Sin embargo, no podrá utilizar proxies para "
#~ "recuperación perezosa de asociaciones, lo cual limitará sus opciones para "
#~ "afinar el rendimiento."

#~ msgid ""
#~ "There are two high-level types of Tuplizers, represented by the "
#~ "<literal>org.hibernate.tuple.entity.EntityTuplizer</literal> and "
#~ "<literal>org.hibernate.tuple.component.ComponentTuplizer</literal> "
#~ "interfaces. <literal>EntityTuplizer</literal>s are responsible for "
#~ "managing the above mentioned contracts in regards to entities, while "
#~ "<literal>ComponentTuplizer</literal>s do the same for components."
#~ msgstr ""
#~ "Hay dos tipos altos de niveles de Tuplizers, representados por las "
#~ "interfaces <literal>org.hibernate.tuple.entity.EntityTuplizer</literal> y "
#~ "<literal>org.hibernate.tuple.component.ComponentTuplizer</literal>. Los "
#~ "<literal>EntityTuplizer</literal>s son los responsables de administrar "
#~ "los contratos mencionados anteriormente en relación con las entidades "
#~ "mientras que los <literal>ComponentTuplizer</literal>s hacen lo mismo "
#~ "para los componentes."
